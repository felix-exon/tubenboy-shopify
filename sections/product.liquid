{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

<script type="application/json" id="product-data">
{
  "id": {{ product.id | json }},
  "variants": {{ product.variants | json }},
  "options": {{ product.options | json }},
  "selected_variant_id": {{ product.selected_or_first_available_variant.id | json }}
}
</script>

<div class="product">
  <div class="product__grid">
    <div class="product__gallery">
      <div class="product__gallery-main">
        {% for image in product.images %}
          {% assign variant_ids = '' %}
          {% assign image_alt_lower = image.alt | downcase | strip %}
          {% for variant in product.variants %}
            {% assign variant_color = '' %}
            {% for option in variant.options %}
              {% assign option_name = product.options[forloop.index0].name %}
              {% if option_name == 'Color' or option_name == 'Colour' or option_name == 'Farbe' %}
                {% assign variant_color = option | downcase | strip %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% comment %} Check if image is associated with this variant {% endcomment %}
            {% assign is_associated = false %}
            {% if variant.featured_image.id == image.id %}
              {% assign is_associated = true %}
            {% elsif image_alt_lower contains variant_color and variant_color != '' %}
              {% assign is_associated = true %}
            {% elsif image.alt == blank and forloop.first %}
              {% comment %} If no alt text and it's the first image, associate with first variant {% endcomment %}
              {% assign is_associated = true %}
            {% endif %}
            
            {% if is_associated %}
              {% if variant_ids == '' %}
                {% assign variant_ids = variant.id %}
              {% else %}
                {% assign variant_ids = variant_ids | append: ',' | append: variant.id %}
              {% endif %}
            {% endif %}
          {% endfor %}
          <div 
            class="product__image-wrapper{% if forloop.first %} active{% endif %}" 
            data-image-index="{{ forloop.index0 }}"
            data-variant-ids="{{ variant_ids }}"
            data-image-alt="{{ image.alt | escape }}"
          >
            {% render 'image', class: 'product__image', image: image %}
          </div>
        {% endfor %}
      </div>

      {% if product.images.size > 1 %}
        <div class="product__gallery-thumbnails">
          {% for image in product.images %}
            {% assign variant_ids = '' %}
            {% assign image_alt_lower = image.alt | downcase | strip %}
            {% for variant in product.variants %}
              {% assign variant_color = '' %}
              {% for option in variant.options %}
                {% assign option_name = product.options[forloop.index0].name %}
                {% if option_name == 'Color' or option_name == 'Colour' or option_name == 'Farbe' %}
                  {% assign variant_color = option | downcase | strip %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {% comment %} Check if image is associated with this variant {% endcomment %}
              {% assign is_associated = false %}
              {% if variant.featured_image.id == image.id %}
                {% assign is_associated = true %}
              {% elsif image_alt_lower contains variant_color and variant_color != '' %}
                {% assign is_associated = true %}
              {% elsif image.alt == blank and forloop.first %}
                {% comment %} If no alt text and it's the first image, associate with first variant {% endcomment %}
                {% assign is_associated = true %}
              {% endif %}
              
              {% if is_associated %}
                {% if variant_ids == '' %}
                  {% assign variant_ids = variant.id %}
                {% else %}
                  {% assign variant_ids = variant_ids | append: ',' | append: variant.id %}
                {% endif %}
              {% endif %}
            {% endfor %}
            <button
              class="product__thumbnail{% if forloop.first %} active{% endif %}"
              data-image-index="{{ forloop.index0 }}"
              data-variant-ids="{{ variant_ids }}"
              data-image-alt="{{ image.alt | escape }}"
              aria-label="View image {{ forloop.index }} of {{ product.images.size }}"
            >
              {% render 'image', class: 'product__thumbnail-image', image: image %}
            </button>
          {% endfor %}
        </div>

        <button
          class="product__gallery-nav product__gallery-nav--prev"
          aria-label="Previous image"
          {% if product.images.size <= 1 %}disabled{% endif %}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <button
          class="product__gallery-nav product__gallery-nav--next"
          aria-label="Next image"
          {% if product.images.size <= 1 %}disabled{% endif %}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M9 6L15 12L9 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      {% endif %}
    </div>

    <div class="product__details">
      <h1 class="product__title">{{ product.title }}</h1>
      
      <div class="product__price">
        {{ product.price | money }}
        {% if product.compare_at_price > product.price %}
          <span class="product__compare-price">{{ product.compare_at_price | money }}</span>
        {% endif %}
      </div>

      <div class="product__form">
        {% form 'product', product %}
          {% assign current_variant = product.selected_or_first_available_variant %}
          <input type="hidden" name="id" value="{{ current_variant.id }}">

          {% if product.has_only_default_variant == false %}
            {% for option in product.options_with_values %}
              <div class="product__option">
                <label class="product__option-label" for="Option-{{ option.position }}">
                  {{ option.name }}
                </label>

                {% if option.name == 'Color' or option.name == 'Colour' %}
                  <div class="product__color-options">
                    {% for value in option.values %}
                      <input
                        type="radio"
                        id="Option-{{ option.position }}-{{ value | handleize }}"
                        name="options[{{ option.name }}]"
                        value="{{ value }}"
                        {% if option.selected_value == value %}checked{% endif %}
                        class="product__color-radio"
                      >
                      <label
                        for="Option-{{ option.position }}-{{ value | handleize }}"
                        class="product__color-label"
                        style="background-color: {{ value | handleize }};"
                        title="{{ value }}"
                      >
                        <span class="visually-hidden">{{ value }}</span>
                      </label>
                    {% endfor %}
                  </div>
                {% else %}
                  <div class="product__select-wrapper">
                    <select
                      id="Option-{{ option.position }}"
                      name="options[{{ option.name }}]"
                      class="product__option-select"
                    >
                      {% for value in option.values %}
                        <option
                          value="{{ value }}"
                          {% if option.selected_value == value %}selected="selected"{% endif %}
                        >
                          {{ value }}
                        </option>
                      {% endfor %}
                    </select>
                    <div class="product__select-arrow">
                      <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                        <path d="M2 4L6 8L10 4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </div>
                  </div>
                {% endif %}
              </div>
            {% endfor %}
          {% endif %}

          <div class="product__quantity">
            <label for="quantity" class="product__quantity-label">{{ 'products.quantity' | t }}</label>
            <div class="product__quantity-wrapper">
              <button
                type="button"
                class="product__quantity-button"
                data-action="decrease"
                aria-label="{{ 'products.decrease_quantity' | t }}"
              >
                <svg width="12" height="2" viewBox="0 0 12 2" fill="none">
                  <path d="M1 1H11" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
              </button>
              <input
                type="number"
                id="quantity"
                name="quantity"
                min="1"
                value="1"
                class="product__quantity-input"
                aria-label="{{ 'products.quantity' | t }}"
              >
              <button
                type="button"
                class="product__quantity-button"
                data-action="increase"
                aria-label="{{ 'products.increase_quantity' | t }}"
              >
                <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                  <path d="M6 1V11M1 6H11" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
              </button>
            </div>
          </div>

          <div class="product__buttons">
            <button type="submit" class="product__add-to-cart" id="add-to-cart-btn">
              {{ 'products.add_to_cart' | t }}
            </button>
            {% if section.settings.show_payment_button %}
              {{ form | payment_button }}
            {% endif %}
          </div>
          
          {% if section.settings.show_shipping_info and section.settings.shipping_info_page != blank %}
            <div class="product__shipping-info">
              <a href="{{ pages[section.settings.shipping_info_page].url }}" class="product__shipping-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M1 3H13L12 10H3L1 3ZM1 3L0.5 1M4 13.5H4.01M11 13.5H11.01" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                {{ section.settings.shipping_info_text | default: 'Versandinformationen' }}
              </a>
            </div>
          {% endif %}
        {% endform %}
      </div>
    </div>
  </div>

  <div class="product__description">
    <h2>{{ 'products.product_description' | t }}</h2>
    <div class="product__description-content">
      {{ product.description }}
    </div>
  </div>
</div>

{% stylesheet %}
  .product {
    max-width: var(--page-width);
    margin: 0 auto;
    padding: 2rem var(--page-margin);
  }

  .product__grid {
    display: grid;
    grid-template-columns: 60% 40%;
    gap: 3rem;
    margin-bottom: 3rem;
  }

  .product__gallery {
    position: relative;
    max-width: 100%;
  }

  .product__gallery-main {
    position: relative;
    margin-bottom: 1rem;
    aspect-ratio: 1;
    max-width: 100%;
  }

  .product__image-wrapper {
    display: none;
    opacity: 0;
    transition: opacity 0.3s ease;
    width: 100%;
    height: 100%;
  }

  .product__image-wrapper.active {
    display: block;
    opacity: 1;
  }

  .product__image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 0.5rem;
  }

  .product__gallery-thumbnails {
    display: flex;
    gap: 0.5rem;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding-bottom: 0.5rem;
    max-width: 100%;
  }

  .product__gallery-thumbnails::-webkit-scrollbar {
    display: none;
  }

  .product__thumbnail {
    flex: 0 0 5rem;
    height: 5rem;
    padding: 0;
    border: 2px solid transparent;
    border-radius: 0.25rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.2s ease;
  }

  .product__thumbnail.active {
    border-color: var(--color-accent);
  }

  .product__thumbnail:hover {
    border-color: var(--color-border);
  }

  .product__thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product__gallery-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 2.5rem;
    height: 2.5rem;
    background-color: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    opacity: 0;
  }

  .product__gallery:hover .product__gallery-nav {
    opacity: 1;
  }

  .product__gallery-nav:hover {
    background-color: var(--color-background-subdued);
  }

  .product__gallery-nav:disabled {
    display: none;
  }

  .product__gallery-nav--prev {
    left: 1rem;
  }

  .product__gallery-nav--next {
    right: 1rem;
  }

  .product__title {
    font-size: 2rem;
    margin: 0 0 1rem;
  }

  .product__price {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 2rem;
  }

  .product__compare-price {
    font-size: 1.25rem;
    color: var(--color-foreground-subdued);
    text-decoration: line-through;
    margin-left: 0.5rem;
  }

  .product__form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .product__variants,
  .product__quantity {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .product__variant-select,
  .product__quantity-input {
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    font-size: 1rem;
  }

  .product__buttons {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .product__add-to-cart {
    background-color: var(--color-accent);
    color: var(--color-background);
    border: none;
    padding: 1rem;
    border-radius: 0.25rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  .product__add-to-cart:hover {
    opacity: 0.9;
  }

  .product__add-to-cart:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .product__shipping-info {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--color-border);
  }

  .product__shipping-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-foreground);
    text-decoration: none;
    font-size: 0.875rem;
    transition: color 0.2s ease;
  }

  .product__shipping-link:hover {
    color: var(--color-accent);
  }

  .product__shipping-link svg {
    flex-shrink: 0;
  }

  .product__description {
    border-top: 1px solid var(--color-border);
    padding-top: 2rem;
  }

  .product__description h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .product__description-content {
    font-size: 1rem;
    line-height: 1.6;
  }

  @media screen and (max-width: 749px) {
    .product__grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .product__gallery-main {
      aspect-ratio: 4/3;
    }

    .product__gallery-nav {
      opacity: 1;
      width: 2rem;
      height: 2rem;
    }

    .product__thumbnail {
      flex: 0 0 4rem;
      height: 4rem;
    }
  }

  .product__option {
    margin-bottom: 1.5rem;
  }

  .product__option-label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .product__color-options {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .product__color-radio {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .product__color-label {
    display: block;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    border: 2px solid var(--color-border);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
  }

  .product__color-radio:checked + .product__color-label {
    border-color: var(--color-accent);
    transform: scale(1.1);
  }

  .product__color-radio:focus-visible + .product__color-label {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .product__select-wrapper {
    position: relative;
  }

  .product__option-select {
    width: 100%;
    padding: 0.75rem;
    padding-right: 2.5rem;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    font-size: 1rem;
    appearance: none;
    background-color: var(--color-background);
    cursor: pointer;
  }

  .product__select-arrow {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: var(--color-foreground);
  }

  .product__quantity {
    margin-bottom: 1.5rem;
  }

  .product__quantity-label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .product__quantity-wrapper {
    display: flex;
    align-items: center;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    width: fit-content;
  }

  .product__quantity-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background: none;
    border: none;
    color: var(--color-foreground);
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .product__quantity-button:hover {
    background-color: var(--color-background-subdued);
  }

  .product__quantity-button:focus-visible {
    outline: 2px solid var(--color-accent);
    outline-offset: -2px;
  }

  .product__quantity-input {
    width: 3rem;
    height: 2.5rem;
    border: none;
    border-left: 1px solid var(--color-border);
    border-right: 1px solid var(--color-border);
    text-align: center;
    font-size: 1rem;
    -moz-appearance: textfield;
  }

  .product__quantity-input::-webkit-outer-spin-button,
  .product__quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:general.product",
  "settings": [
    {
      "type": "header",
      "content": "Payment Settings"
    },
    {
      "type": "checkbox",
      "id": "show_payment_button",
      "label": "Show payment button",
      "default": true
    },
    {
      "type": "header",
      "content": "Shipping Information"
    },
    {
      "type": "checkbox",
      "id": "show_shipping_info",
      "label": "Show shipping information link",
      "default": true
    },
    {
      "type": "page",
      "id": "shipping_info_page",
      "label": "Shipping information page",
      "info": "Select a page with your shipping information"
    },
    {
      "type": "text",
      "id": "shipping_info_text",
      "label": "Link text",
      "default": "Versandinformationen",
      "info": "Text displayed for the shipping info link"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}

{% javascript %}
  const quantityInput = document.querySelector('.product__quantity-input');
  const decreaseButton = document.querySelector('[data-action="decrease"]');
  const increaseButton = document.querySelector('[data-action="increase"]');

  if (quantityInput && decreaseButton && increaseButton) {
    decreaseButton.addEventListener('click', function(e) {
      e.preventDefault();
      const currentValue = parseInt(quantityInput.value) || 1;
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
      }
    });

    increaseButton.addEventListener('click', function(e) {
      e.preventDefault();
      const currentValue = parseInt(quantityInput.value) || 1;
      quantityInput.value = currentValue + 1;
    });
  }

  // Initialize product data from script tag
  const productScript = document.getElementById('product-data');
  if (productScript) {
    try {
      window.productData = JSON.parse(productScript.textContent);
    } catch(e) {
      console.error('Failed to parse product data:', e);
    }
  }

  const gallery = document.querySelector('.product__gallery');
  if (gallery) {
    const mainImages = gallery.querySelectorAll('.product__image-wrapper');
    const thumbnails = gallery.querySelectorAll('.product__thumbnail');
    const prevButton = gallery.querySelector('.product__gallery-nav--prev');
    const nextButton = gallery.querySelector('.product__gallery-nav--next');
    let currentIndex = 0;

    function showImage(index) {
      mainImages.forEach(image => image.classList.remove('active'));
      thumbnails.forEach(thumb => thumb.classList.remove('active'));
      
      if (mainImages[index]) {
        mainImages[index].classList.add('active');
        thumbnails[index].classList.add('active');
        currentIndex = index;
      }

      if (prevButton) {
        prevButton.disabled = index === 0;
      }
      if (nextButton) {
        nextButton.disabled = index === mainImages.length - 1;
      }
    }

    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', () => {
        showImage(index);
      });
    });

    if (prevButton) {
      prevButton.addEventListener('click', () => {
        if (currentIndex > 0) {
          showImage(currentIndex - 1);
        }
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        if (currentIndex < mainImages.length - 1) {
          showImage(currentIndex + 1);
        }
      });
    }

    function updateGalleryForVariant() {
      if (!window.productData) return;

      const variantIdInput = document.querySelector('input[name="id"]');
      const currentVariantId = variantIdInput ? parseInt(variantIdInput.value) : window.productData.selected_variant_id;
      
      const matchingVariant = window.productData.variants.find(v => v.id === currentVariantId);
      
      if (!matchingVariant) return;

      console.log('Current variant:', matchingVariant.title, 'ID:', matchingVariant.id);

      mainImages.forEach(image => {
        image.classList.remove('active');
        image.style.display = 'none';
      });
      thumbnails.forEach(thumb => {
        thumb.classList.remove('active');
        thumb.style.display = 'none';
      });

      let visibleImages = [];
      mainImages.forEach((image, index) => {
        const variantIdsStr = image.dataset.variantIds || '';
        const variantIds = variantIdsStr ? variantIdsStr.split(',').map(id => parseInt(id)) : [];
        
        if (variantIds.includes(matchingVariant.id)) {
          image.style.display = '';
          thumbnails[index].style.display = '';
          visibleImages.push(index);
          console.log('Showing image:', index);
        }
      });

      if (visibleImages.length === 0) {
        mainImages.forEach((image, index) => {
          const variantIdsStr = image.dataset.variantIds || '';
          if (variantIdsStr === '') {
            image.style.display = '';
            thumbnails[index].style.display = '';
            visibleImages.push(index);
          }
        });
      }

      console.log('Total images visible:', visibleImages.length);
      if (visibleImages.length > 0) {
        showImage(visibleImages[0]);
      }
    }

    const variantSelects = document.querySelectorAll('select[name^="options["]');
    const colorRadios = document.querySelectorAll('.product__color-radio');

    function updateVariantId() {
      console.log('updateVariantId called');
      
      const selectedOptions = {};
      variantSelects.forEach(select => {
        if (select.name && select.name.includes('options[')) {
          const optionName = select.name.match(/options\[(.*?)\]/)[1];
          selectedOptions[optionName] = select.value;
        }
      });
      colorRadios.forEach(radio => {
        if (radio.checked && radio.name && radio.name.includes('options[')) {
          const optionName = radio.name.match(/options\[(.*?)\]/)[1];
          selectedOptions[optionName] = radio.value;
        }
      });

      console.log('Selected options:', selectedOptions);

      if (window.productData) {
        console.log('Available variants:', window.productData.variants);
        console.log('Product options:', window.productData.options);

        const matchingVariant = window.productData.variants.find(variant => {
          const matches = Object.entries(selectedOptions).every(([optionName, optionValue]) => {
            const optionIndex = window.productData.options.indexOf(optionName);
            console.log('Looking for option:', optionName, 'found at index:', optionIndex);
            if (optionIndex >= 0) {
              const variantOption = variant.options[optionIndex];
              const isMatch = variantOption === optionValue;
              console.log('Variant', variant.id, ':', variantOption, '===', optionValue, '=', isMatch);
              return isMatch;
            }
            return false;
          });
          console.log('Variant', variant.id, variant.title, 'overall match:', matches);
          return matches;
        });

        if (matchingVariant) {
          const variantIdInput = document.querySelector('input[name="id"]');
          if (variantIdInput) {
            variantIdInput.value = matchingVariant.id;
            console.log('Updated variant ID to:', matchingVariant.id, matchingVariant.title);
          }
        } else {
          console.log('No matching variant found for options:', selectedOptions);
        }
      }
    }

    variantSelects.forEach(input => {
      input.addEventListener('change', function() {
        updateVariantId();
        setTimeout(updateGalleryForVariant, 100);
      });
    });

    colorRadios.forEach(input => {
      input.addEventListener('change', function() {
        updateVariantId();
        setTimeout(updateGalleryForVariant, 100);
      });
    });

    updateGalleryForVariant();
  }

{% endjavascript %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Simple AJAX Add to Cart
  const form = document.querySelector('form[action*="/cart/add"]');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const btn = form.querySelector('button[type="submit"]');
      const originalText = btn.textContent;
      
      btn.disabled = true;
      btn.textContent = 'Wird hinzugefügt...';
      
      fetch('/cart/add.js', {
        method: 'POST',
        body: new FormData(form)
      })
      .then(response => response.json())
      .then(data => {
        btn.textContent = 'Hinzugefügt!';
        btn.style.backgroundColor = '#28a745';
        btn.style.color = 'white';
        
        // Update cart count in header
        updateCartCount();
        
        // Dispatch custom event for other components
        document.dispatchEvent(new CustomEvent('cart:updated', {
          detail: { item: data }
        }));
        
        setTimeout(function() {
          btn.disabled = false;
          btn.textContent = originalText;
          btn.style.backgroundColor = '';
          btn.style.color = '';
        }, 2000);
      })
      .catch(error => {
        btn.textContent = 'Fehler';
        btn.style.backgroundColor = '#dc3545';
        btn.style.color = 'white';
        
        setTimeout(function() {
          btn.disabled = false;
          btn.textContent = originalText;
          btn.style.backgroundColor = '';
          btn.style.color = '';
        }, 2000);
      });
    });
  }

  // Function to update cart count in header
  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        // Common selectors for cart count elements
        const cartCountSelectors = [
          '.cart-count',
          '[data-cart-count]',
          '.header__cart-count',
          '.header__nav-action-count',
          '.cart__count',
          '.cart-drawer__count',
          '#cart-count',
          '.js-cart-count'
        ];
        
        cartCountSelectors.forEach(selector => {
          const elements = document.querySelectorAll(selector);
          elements.forEach(element => {
            element.textContent = cart.item_count;
            element.style.display = cart.item_count > 0 ? 'flex' : 'none';
            
            // Add/remove multi-digit class for styling
            if (cart.item_count > 9) {
              element.classList.add('multi-digit');
            } else {
              element.classList.remove('multi-digit');
            }
          });
        });
        
        // Show/hide cart count based on item count
        cartCountSelectors.forEach(selector => {
          const elements = document.querySelectorAll(selector);
          elements.forEach(element => {
            if (cart.item_count > 0) {
              element.style.display = 'flex';
            } else {
              element.style.display = 'none';
            }
          });
        });
        
        console.log('Cart count updated to:', cart.item_count);
      })
      .catch(error => {
        console.log('Error updating cart count:', error);
      });
  }
});
</script>